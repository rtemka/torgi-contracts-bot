package bot

import (
	"bufio"
	"strconv"
	"strings"
	"trbot/src/botDB"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// bot message
const (
	unknownMsg     = "–ò–∑–≤–∏–Ω–∏, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π -- /help"
	errorMsg       = "–ò–∑–≤–∏–Ω–∏ üò•, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
	invalidArgsMsg = "–ò–∑–≤–∏–Ω–∏, –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã ü§∑"
	hiMsg          = "–ü—Ä–∏–≤–µ—Ç üëã -- /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
	startMsg       = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚öíÔ∏è"
	statusMsg      = "üëå -- /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
)

// command help message
const (
	generalHelpMsg = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n\t/t - –∞—É–∫—Ü–∏–æ–Ω—ã‚öîÔ∏è/–∑–∞—è–≤–∫–∏üñ•Ô∏è —Å–µ–≥–æ–¥–Ω—è" +
		"\n\t/f - –∞—É–∫—Ü–∏–æ–Ω—ã/–∑–∞—è–≤–∫–∏/–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º ‚è≥" +
		"\n\t/p - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–∫—É–ø–æ–∫ ‚ö∞Ô∏è" +
		"\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ: /help -[–∏–º—è –∫–æ–º–∞–Ω–¥—ã]"
	todayHelpMsg = "–ò–º—è:\n\n\t/t\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n\n\t/t\t[–æ–ø—Ü–∏–∏]...\n\n–û–ø–∏—Å–∞–Ω–∏–µ:" +
		"\n\n\t/t –∑–Ω–∞—á–∏—Ç 'today' —Ç.–µ '—Å–µ–≥–æ–¥–Ω—è'.\n\t–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—Ä–≥–∏ –∏ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å" +
		"\n\n–û–ø—Ü–∏–∏:\n\n\t-a, --auction\t –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–∫—Ü–∏–æ–Ω—ã\n\t-g, --go\t –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏"
	futureHelpMsg = "–ò–º—è:\n\t/f\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n\t/f\t[–æ–ø—Ü–∏–∏]...\n–û–ø–∏—Å–∞–Ω–∏–µ:" +
		"\n\t/f –∑–Ω–∞—á–∏—Ç 'future' —Ç.–µ '–±—É–¥—É—â–µ–µ'.\n\t–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –±—É–¥—É—â–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã –∏ –∑–∞—è–≤–∫–∏," +
		"\n–∞ —Ç–∞–∫–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ —Ç–∏–ø—É –∑–∞–∫—É–ø–∫–∏ —Å—É–º–º—ã –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n" +
		"–û–ø—Ü–∏–∏:\n\t-a, --auction\t –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–∫—Ü–∏–æ–Ω—ã\n\t-g, --go\t –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏" +
		"\n\t-m, --money\t –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É–º–º—ã –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è" +
		"\n\t-d, --days=[+]NUM\t –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –Ω–∞ NUM –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"
	pastHelpMsg = "–ò–º—è:\n\t/p\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n\t/p\t[–æ–ø—Ü–∏–∏]...\n–û–ø–∏—Å–∞–Ω–∏–µ:" +
		"\n\t/p –∑–Ω–∞—á–∏—Ç 'past' —Ç.–µ '–ø—Ä–æ—à–ª–æ–µ'.\n\t–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–∫—É–ø–æ–∫\n" +
		"–û–ø—Ü–∏–∏:\n\t-d, --days=[+]NUM\t –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –Ω–∞ NUM –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
)

// bot command
const (
	todayCmd  = "t"
	futureCmd = "f"
	pastCmd   = "p"
	helpCmd   = "help"
	statusCmd = "status"
	startCmd  = "start"
	hiCmd     = "hi"
)

// bot command argument
const (
	auctionArg     = "-a"
	auctionArgLong = "--auction"
	goingArg       = "-g"
	goingArgLong   = "--go"
	moneyArg       = "-m"
	moneyArgLong   = "--money"
	daysArg        = "-d"
	daysArgLong    = "--days"
	todayArg       = "-/t"
	futureArg      = "-/f"
	pastArg        = "-/p"
)

// dbQueryManager is responsible
// for the retrieving info from database
type dbQueryManager interface {
	Query(botDB.QueryOpt, int) ([]botDB.PurchaseRecord, error)
}

// tgUpdHandler processes incoming telegram updates
type tgUpdHandler struct {
	qm dbQueryManager
}

func newTgUpdHandler(qm dbQueryManager) *tgUpdHandler {
	return &tgUpdHandler{qm: qm}
}

func (t *tgUpdHandler) handleUpdate(api *tgbotapi.BotAPI, u *tgbotapi.Update) {
	if !u.Message.IsCommand() {
		return
	}

	var msgs []string

	switch u.Message.Command() {
	case todayCmd:
		msgs = t.todayCmdResponse(u.Message)
	case futureCmd:
		msgs = t.futureCmdResponse(u.Message)
	case pastCmd:
		msgs = t.pastCmdResponse(u.Message)
	case helpCmd:
		msgs = t.helpCmdResponse(u.Message)
	case startCmd:
		msgs = []string{startMsg}
	case statusCmd:
		msgs = []string{statusMsg}
	case hiCmd:
		msgs = []string{hiMsg}
	default:
		msgs = []string{unknownMsg}
	}

	for i := range msgs {
		msg := tgbotapi.NewMessage(u.Message.Chat.ID, msgs[i])
		api.Send(msg)
	}
}

func (t *tgUpdHandler) helpCmdResponse(m *tgbotapi.Message) []string {

	msg := generalHelpMsg

	args := m.CommandArguments()
	if len(args) == 0 {
		return []string{msg}
	}

	switch args {
	case todayArg:
		msg = todayHelpMsg
	case futureArg:
		msg = futureHelpMsg
	case pastHelpMsg:
		msg = pastHelpMsg
	default:
		msg = invalidArgsMsg
	}

	return []string{msg}
}

func (t *tgUpdHandler) todayCmdResponse(m *tgbotapi.Message) []string {

	args := m.CommandArguments()
	opt := botDB.Today

	switch args {
	case auctionArg, auctionArgLong:
		opt = botDB.TodayAuction
	case goingArg, goingArgLong:
		opt = botDB.TodayGo
	default:
		return []string{errorMsg}
	}

	recs, err := t.qm.Query(opt, 0)
	if err != nil {
		return []string{errorMsg}
	}

	return []string{buildMessage(recs, opt)}
}

func (t *tgUpdHandler) futureCmdResponse(m *tgbotapi.Message) []string {
	var (
		d   int
		err error
	)
	args := m.CommandArguments()
	opt := botDB.Future
	days := strings.Contains(args, daysArg) || strings.Contains(args, daysArgLong)

	if days {
		m := map[string]bool{daysArg: true, daysArgLong: true}
		args, d, err = parseAndStripOptions(args, m)
		if err != nil {
			return []string{errorMsg}
		}
	}

	switch args {
	case auctionArg, auctionArgLong:
		opt = botDB.FutureAuction
	case goingArg, goingArgLong:
		opt = botDB.FutureGo
	case moneyArg, moneyArgLong:
		opt = botDB.FutureMoney
	default:
		return []string{errorMsg}
	}

	recs, err := t.qm.Query(opt, d)
	if err != nil {
		return []string{errorMsg}
	}

	return []string{buildMessage(recs, opt)}
}

func (t *tgUpdHandler) pastCmdResponse(m *tgbotapi.Message) []string {
	var (
		d   int
		err error
	)
	args := m.CommandArguments()
	opt := botDB.Past
	days := strings.Contains(args, daysArg) || strings.Contains(args, daysArgLong)

	if days {
		m := map[string]bool{daysArg: true, daysArgLong: true}
		args, d, err = parseAndStripOptions(args, m)
		if err != nil {
			return []string{errorMsg}
		}
	}

	if args != "" {
		return []string{errorMsg}
	}

	recs, err := t.qm.Query(opt, d)
	if err != nil {
		return []string{errorMsg}
	}

	return []string{buildMessage(recs, opt)}
}

func buildMessage(recs []botDB.PurchaseRecord, opt botDB.QueryOpt) string {
	var b strings.Builder

	for i := range recs {
		b.WriteString(recs[i].InfoString(opt))
	}

	return b.String()
}
func parseAndStripOptions(args string, m map[string]bool) (string, int, error) {
	var (
		d   int
		err error
		b   strings.Builder
	)
	scanner := bufio.NewScanner(strings.NewReader(args))
	scanner.Split(bufio.ScanWords)

	for next, t := false, ""; scanner.Scan(); next = m[t] {
		t = scanner.Text()
		if next {
			d, err = strconv.Atoi(t)
			if err != nil {
				return b.String(), d, err
			}
			continue
		}
		if m[t] {
			continue
		}
		b.WriteString(t)
	}

	return b.String(), d, nil
}
